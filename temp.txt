game
    UI (spritesheet)
        menu
        button
    Entities (UI, spritesheet)
        namespace factory
            machines (MK1 Miner, Constructor, Assembler)
            belts

int main(){
    SDL_Rect grid;

    data->config += "defalts";
    data->config -= "defalts";

    data->config.set_group("splitter");

    SDL_Texture *spritesheet;
    data->config.get_var(spritesheet)

    spritesheet

    data->config.clear();

    return 0;
}


#include <iostream>
#include <string>
#include <algorithm>
#include <type_traits>
#include <fstream>
#include <vector>

#define ge_var(var) get<decltype(var)>(var, #var)

namespace ge {
    class Config {
    public:
        Config(){}
        ~Config(){}

        int load(const char* path){
            std::ifstream file(path);
            if(!file.is_open()){ return 1; }

            std::string data((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());

            return load(data);
        }

        int load(std::string &data){ 
            for(unsigned int i = 0; i < data.length() - 1; i++){
                if(data.at(i) == '/' && data.at(i + 1) == '/'){ comment(data, i); }
                if(data.at(i) == '/' && data.at(i + 1) == '*'){ comment(data, i, true); }
                // if(data.at(i) == '#'){ hash(data, i); }
            }
            return 0;
        }

        void unload(const char* path){

        }

        template <class T>
        void get(std::string name, T &var){}

    private:
        void comment(std::string &data, unsigned int &i, bool multi = false){
            std::cout << "Here" << std::endl;
            int s = 2;
            if(!multi){
                while((data.at(i + s) != '\n') && i + s >= data.length() - 1){ s++; }
            }
            else {
                while((data.at(i + s) - 2 != '*') && (data.at((i + s) - 1) != '/') && i + s >= data.length() - 1){ s++; }
            }
            std::string temp = data.substr(0, i - 1);
            temp += data.substr(s, data.length() - 1);
            data = temp;
        }

        bool hash(std::string &data, unsigned int &i){
            int s = 1;
            while(data.at(i + s) != '\n' || data.at(i + s) != '#'){ s++; }

            std::string temp = data.substr(i + 1, s - i);
            i = s + i;
  
            if(temp.find(' ') == std::string::npos){ return 1; }
            std::string first = temp.substr(0, temp.find_first_of(' '));

            std::string second = temp.substr(temp.find_first_of(' ') + 1, temp.size() - 1); 
            second.erase(std::remove_if(second.begin(), second.end(), ::isspace), second.end());
            second = second.substr(1, second.size() - 2);

            if(first == "include"){ return load(second); }
            if(first == "group"  ){
                cData.push_back(std::pair<std::string, std::vector<std::string>>(second, std::vector<std::string>()));
            }
            return 0;
        }

        std::vector<std::pair<std::string, std::vector<std::string>>> cData;
    };
}
// const Uint8 *state = SDL_GetKeyboardState(nullptr);
// printf("Mouse button: %d %d %d\n", SDL_GetMouseState(nullptr, nullptr), state[SDL_SCANCODE_1], SDL_GetModState());



int main(){
    std::string temp = "\
        //testing this thing                            \n\
        #group temp1                                    \n\
        spritesheet = ./res/img/test_sprite_sheet.png;  \n\
                                                        \n\
        #group temp2                                    \n\
        spritesheet = ./res/img/test_sprite_sheet.png;  \n\
                                                        \n\
        #include \"/logistics/splitter.config\"         \n\
                                                        \n\
        scale = 4;                                      \n\
        grid = { 0, 0, 88, 88 };                        \n\
                                                        \n\
        /* multi                                        \n\
           comment                                      \n\
           test */                                      \n\
        spritesheet = group::spritesheet;               \n\
        BOUNDS = { 0, 89, 43, 43 };                     \n\
        ";

    ge::Config config;
    config.load(temp);
    std::cout << temp << std::endl;

    return 0;
}